@using System.Diagnostics
@using System.Linq
@inherits NavLink

<NavLink class="@BaseClassStr"
         ActiveClass="@ActiveClassStr"
         href="@RoutePath">@Name</NavLink>

@code {

    public bool Selected =>
                base.CssClass is null ? false :
                    base.CssClass.Contains("active") ? true : false;

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? RoutePath { get; set; }

    [Parameter]
    public bool DefaultNavLink { get; set; } = false;

    [Parameter]
    public EventCallback<string> OnSelected { get; set; }

    [Parameter]
    public string? ActiveClassStr { get; set; }

    [Parameter]
    public string? BaseClassStr { get; set; }



    protected override void OnInitialized()
    {
    }

    private void HandleOnStateChange()
    {
        if (Selected)
        {
            ActiveClass = ActiveClassStr;
        }
        else
        {
            ActiveClass = string.Empty;
        }
        HandleOnSelected();


        StateHasChanged();
    }


    private void HandleOnSelected()
    {
        Debug.WriteLine($"{Name} Selected");
    }



    protected override Task OnParametersSetAsync()
    {
        Debug.WriteLine("OnParametersSetAsync");
        //HandleOnStateChange();
        return base.OnParametersSetAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.ToDictionary()
            .ToList()
            .ForEach((kv) =>
            {
                Debug.WriteLine($"{kv.Key}: {kv.Value}");
            });

        return base.SetParametersAsync(parameters);
    }
}